<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="45"><g><title>cargo::core::resolver::activate (1 samples, 2.22%)</title><rect x="0.0000%" y="693" width="2.2222%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50">c..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 2.22%)</title><rect x="0.0000%" y="677" width="2.2222%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50">c..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 2.22%)</title><rect x="0.0000%" y="661" width="2.2222%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 2.22%)</title><rect x="0.0000%" y="645" width="2.2222%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50">&lt;..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps::_{{closure}} (1 samples, 2.22%)</title><rect x="0.0000%" y="629" width="2.2222%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50">c..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 2.22%)</title><rect x="0.0000%" y="613" width="2.2222%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50">c..</text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 2.22%)</title><rect x="0.0000%" y="597" width="2.2222%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50">&lt;..</text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 2.22%)</title><rect x="0.0000%" y="581" width="2.2222%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50">&lt;..</text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 2.22%)</title><rect x="0.0000%" y="565" width="2.2222%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 2.22%)</title><rect x="0.0000%" y="549" width="2.2222%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50">&lt;..</text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (1 samples, 2.22%)</title><rect x="0.0000%" y="533" width="2.2222%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50">c..</text></g><g><title>serde_json::de::from_slice (1 samples, 2.22%)</title><rect x="0.0000%" y="517" width="2.2222%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 2.22%)</title><rect x="0.0000%" y="501" width="2.2222%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50">&lt;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 2.22%)</title><rect x="0.0000%" y="485" width="2.2222%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50">&lt;..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 2.22%)</title><rect x="0.0000%" y="469" width="2.2222%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50">&lt;..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 2.22%)</title><rect x="0.0000%" y="453" width="2.2222%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 2.22%)</title><rect x="0.0000%" y="437" width="2.2222%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50">&lt;..</text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 2.22%)</title><rect x="0.0000%" y="421" width="2.2222%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50">&lt;..</text></g><g><title>core::str::converts::from_utf8 (1 samples, 2.22%)</title><rect x="0.0000%" y="405" width="2.2222%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50">c..</text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 2.22%)</title><rect x="2.2222%" y="693" width="2.2222%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="2.4722%" y="703.50">c..</text></g><g><title>cargo::core::resolver::activate (1 samples, 2.22%)</title><rect x="2.2222%" y="677" width="2.2222%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="2.4722%" y="687.50">c..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 2.22%)</title><rect x="2.2222%" y="661" width="2.2222%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="2.4722%" y="671.50">c..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 2.22%)</title><rect x="2.2222%" y="645" width="2.2222%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="2.4722%" y="655.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 2.22%)</title><rect x="2.2222%" y="629" width="2.2222%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="2.4722%" y="639.50">&lt;..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps::_{{closure}} (1 samples, 2.22%)</title><rect x="2.2222%" y="613" width="2.2222%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="2.4722%" y="623.50">c..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 2.22%)</title><rect x="2.2222%" y="597" width="2.2222%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="2.4722%" y="607.50">c..</text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 2.22%)</title><rect x="2.2222%" y="581" width="2.2222%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="2.4722%" y="591.50">&lt;..</text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 2.22%)</title><rect x="2.2222%" y="565" width="2.2222%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="2.4722%" y="575.50">&lt;..</text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 2.22%)</title><rect x="2.2222%" y="549" width="2.2222%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="2.4722%" y="559.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 2.22%)</title><rect x="2.2222%" y="533" width="2.2222%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="2.4722%" y="543.50">&lt;..</text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (1 samples, 2.22%)</title><rect x="2.2222%" y="517" width="2.2222%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="2.4722%" y="527.50">c..</text></g><g><title>serde_json::de::from_slice (1 samples, 2.22%)</title><rect x="2.2222%" y="501" width="2.2222%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="2.4722%" y="511.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 2.22%)</title><rect x="2.2222%" y="485" width="2.2222%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="2.4722%" y="495.50">&lt;..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 2.22%)</title><rect x="2.2222%" y="469" width="2.2222%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="2.4722%" y="479.50">&lt;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 2.22%)</title><rect x="2.2222%" y="453" width="2.2222%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="2.4722%" y="463.50">&lt;..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 2.22%)</title><rect x="2.2222%" y="437" width="2.2222%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="1"/><text x="2.4722%" y="447.50">&lt;..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 2.22%)</title><rect x="4.4444%" y="485" width="2.2222%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="4.6944%" y="495.50">&lt;..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1 samples, 2.22%)</title><rect x="4.4444%" y="469" width="2.2222%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="4.6944%" y="479.50">a..</text></g><g><title>_int_free (1 samples, 2.22%)</title><rect x="4.4444%" y="453" width="2.2222%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="4.6944%" y="463.50">_..</text></g><g><title>cargo::core::resolver::resolve (2 samples, 4.44%)</title><rect x="4.4444%" y="693" width="4.4444%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="2"/><text x="4.6944%" y="703.50">cargo..</text></g><g><title>cargo::core::resolver::activate_deps_loop (2 samples, 4.44%)</title><rect x="4.4444%" y="677" width="4.4444%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="2"/><text x="4.6944%" y="687.50">cargo..</text></g><g><title>cargo::core::resolver::activate (2 samples, 4.44%)</title><rect x="4.4444%" y="661" width="4.4444%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="2"/><text x="4.6944%" y="671.50">cargo..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (2 samples, 4.44%)</title><rect x="4.4444%" y="645" width="4.4444%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="2"/><text x="4.6944%" y="655.50">cargo..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 4.44%)</title><rect x="4.4444%" y="629" width="4.4444%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="2"/><text x="4.6944%" y="639.50">alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 4.44%)</title><rect x="4.4444%" y="613" width="4.4444%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="2"/><text x="4.6944%" y="623.50">&lt;core..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps::_{{closure}} (2 samples, 4.44%)</title><rect x="4.4444%" y="597" width="4.4444%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="2"/><text x="4.6944%" y="607.50">cargo..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (2 samples, 4.44%)</title><rect x="4.4444%" y="581" width="4.4444%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="2"/><text x="4.6944%" y="591.50">cargo..</text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (2 samples, 4.44%)</title><rect x="4.4444%" y="565" width="4.4444%" height="15" fill="rgb(250,191,14)" fg:x="2" fg:w="2"/><text x="4.6944%" y="575.50">&lt;carg..</text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (2 samples, 4.44%)</title><rect x="4.4444%" y="549" width="4.4444%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="2"/><text x="4.6944%" y="559.50">&lt;carg..</text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (2 samples, 4.44%)</title><rect x="4.4444%" y="533" width="4.4444%" height="15" fill="rgb(206,27,48)" fg:x="2" fg:w="2"/><text x="4.6944%" y="543.50">cargo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 4.44%)</title><rect x="4.4444%" y="517" width="4.4444%" height="15" fill="rgb(225,35,8)" fg:x="2" fg:w="2"/><text x="4.6944%" y="527.50">&lt;core..</text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (2 samples, 4.44%)</title><rect x="4.4444%" y="501" width="4.4444%" height="15" fill="rgb(250,213,24)" fg:x="2" fg:w="2"/><text x="4.6944%" y="511.50">cargo..</text></g><g><title>serde_json::de::from_slice (1 samples, 2.22%)</title><rect x="6.6667%" y="485" width="2.2222%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="1"/><text x="6.9167%" y="495.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 2.22%)</title><rect x="6.6667%" y="469" width="2.2222%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="1"/><text x="6.9167%" y="479.50">&lt;..</text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 2.22%)</title><rect x="6.6667%" y="453" width="2.2222%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="1"/><text x="6.9167%" y="463.50">&lt;..</text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 2.22%)</title><rect x="8.8889%" y="629" width="2.2222%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="9.1389%" y="639.50">c..</text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 2.22%)</title><rect x="8.8889%" y="613" width="2.2222%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1"/><text x="9.1389%" y="623.50">c..</text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 2.22%)</title><rect x="8.8889%" y="597" width="2.2222%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1"/><text x="9.1389%" y="607.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 2.22%)</title><rect x="8.8889%" y="581" width="2.2222%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="1"/><text x="9.1389%" y="591.50">&lt;..</text></g><g><title>cargo::main (2 samples, 4.44%)</title><rect x="8.8889%" y="693" width="4.4444%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="2"/><text x="9.1389%" y="703.50">cargo..</text></g><g><title>cargo::cli::main (2 samples, 4.44%)</title><rect x="8.8889%" y="677" width="4.4444%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="2"/><text x="9.1389%" y="687.50">cargo..</text></g><g><title>cargo::commands::metadata::exec (2 samples, 4.44%)</title><rect x="8.8889%" y="661" width="4.4444%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="2"/><text x="9.1389%" y="671.50">cargo..</text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (2 samples, 4.44%)</title><rect x="8.8889%" y="645" width="4.4444%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="2"/><text x="9.1389%" y="655.50">cargo..</text></g><g><title>core::ptr::drop_in_place&lt;cargo::ops::resolve::WorkspaceResolve&gt; (1 samples, 2.22%)</title><rect x="11.1111%" y="629" width="2.2222%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="1"/><text x="11.3611%" y="639.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 2.22%)</title><rect x="11.1111%" y="613" width="2.2222%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="1"/><text x="11.3611%" y="623.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::summary::Inner&gt; (1 samples, 2.22%)</title><rect x="11.1111%" y="597" width="2.2222%" height="15" fill="rgb(247,98,35)" fg:x="5" fg:w="1"/><text x="11.3611%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::dependency::Inner&gt; (1 samples, 2.22%)</title><rect x="11.1111%" y="581" width="2.2222%" height="15" fill="rgb(247,138,52)" fg:x="5" fg:w="1"/><text x="11.3611%" y="591.50">c..</text></g><g><title>&lt;semver::identifier::Identifier as core::ops::drop::Drop&gt;::drop (1 samples, 2.22%)</title><rect x="11.1111%" y="565" width="2.2222%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="1"/><text x="11.3611%" y="575.50">&lt;..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 2.22%)</title><rect x="13.3333%" y="661" width="2.2222%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="13.5833%" y="671.50">c..</text></g><g><title>cargo::core::resolver::resolve (1 samples, 2.22%)</title><rect x="13.3333%" y="645" width="2.2222%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="13.5833%" y="655.50">c..</text></g><g><title>&lt;im_rc::nodes::hamt::Iter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 2.22%)</title><rect x="13.3333%" y="629" width="2.2222%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="1"/><text x="13.5833%" y="639.50">&lt;..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 2.22%)</title><rect x="15.5556%" y="629" width="2.2222%" height="15" fill="rgb(244,35,45)" fg:x="7" fg:w="1"/><text x="15.8056%" y="639.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 2.22%)</title><rect x="15.5556%" y="613" width="2.2222%" height="15" fill="rgb(251,115,12)" fg:x="7" fg:w="1"/><text x="15.8056%" y="623.50">&lt;..</text></g><g><title>cargo::core::registry::lock (1 samples, 2.22%)</title><rect x="15.5556%" y="597" width="2.2222%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="1"/><text x="15.8056%" y="607.50">c..</text></g><g><title>cargo::core::summary::Summary::map_dependencies (1 samples, 2.22%)</title><rect x="15.5556%" y="581" width="2.2222%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="1"/><text x="15.8056%" y="591.50">c..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 2.22%)</title><rect x="15.5556%" y="565" width="2.2222%" height="15" fill="rgb(207,117,47)" fg:x="7" fg:w="1"/><text x="15.8056%" y="575.50">a..</text></g><g><title>cargo::core::registry::lock::_{{closure}} (1 samples, 2.22%)</title><rect x="15.5556%" y="549" width="2.2222%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="1"/><text x="15.8056%" y="559.50">c..</text></g><g><title>cargo::core::dependency::Dependency::lock_to (1 samples, 2.22%)</title><rect x="15.5556%" y="533" width="2.2222%" height="15" fill="rgb(209,38,44)" fg:x="7" fg:w="1"/><text x="15.8056%" y="543.50">c..</text></g><g><title>alloc::rc::Rc&lt;T&gt;::make_mut (1 samples, 2.22%)</title><rect x="15.5556%" y="517" width="2.2222%" height="15" fill="rgb(236,212,23)" fg:x="7" fg:w="1"/><text x="15.8056%" y="527.50">a..</text></g><g><title>__GI___libc_malloc (1 samples, 2.22%)</title><rect x="15.5556%" y="501" width="2.2222%" height="15" fill="rgb(242,79,21)" fg:x="7" fg:w="1"/><text x="15.8056%" y="511.50">_..</text></g><g><title>_int_malloc (1 samples, 2.22%)</title><rect x="15.5556%" y="485" width="2.2222%" height="15" fill="rgb(211,96,35)" fg:x="7" fg:w="1"/><text x="15.8056%" y="495.50">_..</text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (3 samples, 6.67%)</title><rect x="13.3333%" y="693" width="6.6667%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="3"/><text x="13.5833%" y="703.50">cargo::op..</text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (3 samples, 6.67%)</title><rect x="13.3333%" y="677" width="6.6667%" height="15" fill="rgb(211,81,21)" fg:x="6" fg:w="3"/><text x="13.5833%" y="687.50">cargo::op..</text></g><g><title>cargo::ops::resolve::resolve_with_registry (2 samples, 4.44%)</title><rect x="15.5556%" y="661" width="4.4444%" height="15" fill="rgb(208,190,38)" fg:x="7" fg:w="2"/><text x="15.8056%" y="671.50">cargo..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (2 samples, 4.44%)</title><rect x="15.5556%" y="645" width="4.4444%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="2"/><text x="15.8056%" y="655.50">cargo..</text></g><g><title>cargo::core::resolver::resolve (1 samples, 2.22%)</title><rect x="17.7778%" y="629" width="2.2222%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="1"/><text x="18.0278%" y="639.50">c..</text></g><g><title>cargo::core::resolver::encode::encodable_package_id (1 samples, 2.22%)</title><rect x="17.7778%" y="613" width="2.2222%" height="15" fill="rgb(244,218,35)" fg:x="8" fg:w="1"/><text x="18.0278%" y="623.50">c..</text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 2.22%)</title><rect x="17.7778%" y="597" width="2.2222%" height="15" fill="rgb(240,68,47)" fg:x="8" fg:w="1"/><text x="18.0278%" y="607.50">&lt;..</text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_key_seed (1 samples, 2.22%)</title><rect x="20.0000%" y="565" width="2.2222%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="1"/><text x="20.2500%" y="575.50">&lt;..</text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 4.44%)</title><rect x="20.0000%" y="613" width="4.4444%" height="15" fill="rgb(235,124,12)" fg:x="9" fg:w="2"/><text x="20.2500%" y="623.50">&lt;&lt;tom..</text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (2 samples, 4.44%)</title><rect x="20.0000%" y="597" width="4.4444%" height="15" fill="rgb(224,169,11)" fg:x="9" fg:w="2"/><text x="20.2500%" y="607.50">&lt;toml..</text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 4.44%)</title><rect x="20.0000%" y="581" width="4.4444%" height="15" fill="rgb(250,166,2)" fg:x="9" fg:w="2"/><text x="20.2500%" y="591.50">&lt;&lt;tom..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 2.22%)</title><rect x="22.2222%" y="565" width="2.2222%" height="15" fill="rgb(242,216,29)" fg:x="10" fg:w="1"/><text x="22.4722%" y="575.50">a..</text></g><g><title>__memcmp_avx2_movbe (1 samples, 2.22%)</title><rect x="22.2222%" y="549" width="2.2222%" height="15" fill="rgb(230,116,27)" fg:x="10" fg:w="1"/><text x="22.4722%" y="559.50">_..</text></g><g><title>toml::de::Deserializer::value (2 samples, 4.44%)</title><rect x="24.4444%" y="597" width="4.4444%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="2"/><text x="24.6944%" y="607.50">toml:..</text></g><g><title>toml::tokens::Tokenizer::eat_spanned (1 samples, 2.22%)</title><rect x="26.6667%" y="581" width="2.2222%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="1"/><text x="26.9167%" y="591.50">t..</text></g><g><title>cargo::ops::cargo_read_manifest::read_package (6 samples, 13.33%)</title><rect x="20.0000%" y="693" width="13.3333%" height="15" fill="rgb(247,143,39)" fg:x="9" fg:w="6"/><text x="20.2500%" y="703.50">cargo::ops::cargo_re..</text></g><g><title>cargo::util::toml::read_manifest (6 samples, 13.33%)</title><rect x="20.0000%" y="677" width="13.3333%" height="15" fill="rgb(236,97,10)" fg:x="9" fg:w="6"/><text x="20.2500%" y="687.50">cargo::util::toml::r..</text></g><g><title>cargo::util::toml::parse (6 samples, 13.33%)</title><rect x="20.0000%" y="661" width="13.3333%" height="15" fill="rgb(233,208,19)" fg:x="9" fg:w="6"/><text x="20.2500%" y="671.50">cargo::util::toml::p..</text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (6 samples, 13.33%)</title><rect x="20.0000%" y="645" width="13.3333%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="6"/><text x="20.2500%" y="655.50">&lt;toml::value::Value ..</text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (6 samples, 13.33%)</title><rect x="20.0000%" y="629" width="13.3333%" height="15" fill="rgb(220,129,5)" fg:x="9" fg:w="6"/><text x="20.2500%" y="639.50">&lt;&amp;mut toml::de::Dese..</text></g><g><title>toml::de::Deserializer::tables (4 samples, 8.89%)</title><rect x="24.4444%" y="613" width="8.8889%" height="15" fill="rgb(242,17,10)" fg:x="11" fg:w="4"/><text x="24.6944%" y="623.50">toml::de::Des..</text></g><g><title>toml::tokens::Tokenizer::eat_spanned (2 samples, 4.44%)</title><rect x="28.8889%" y="597" width="4.4444%" height="15" fill="rgb(242,107,0)" fg:x="13" fg:w="2"/><text x="29.1389%" y="607.50">toml:..</text></g><g><title>toml::tokens::Tokenizer::next (2 samples, 4.44%)</title><rect x="28.8889%" y="581" width="4.4444%" height="15" fill="rgb(251,28,31)" fg:x="13" fg:w="2"/><text x="29.1389%" y="591.50">toml:..</text></g><g><title>&lt;toml::tokens::CrlfFold as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 2.22%)</title><rect x="31.1111%" y="565" width="2.2222%" height="15" fill="rgb(233,223,10)" fg:x="14" fg:w="1"/><text x="31.3611%" y="575.50">&lt;..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 2.22%)</title><rect x="33.3333%" y="693" width="2.2222%" height="15" fill="rgb(215,21,27)" fg:x="15" fg:w="1"/><text x="33.5833%" y="703.50">c..</text></g><g><title>cargo::core::resolver::resolve (1 samples, 2.22%)</title><rect x="33.3333%" y="677" width="2.2222%" height="15" fill="rgb(232,23,21)" fg:x="15" fg:w="1"/><text x="33.5833%" y="687.50">c..</text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 2.22%)</title><rect x="33.3333%" y="661" width="2.2222%" height="15" fill="rgb(244,5,23)" fg:x="15" fg:w="1"/><text x="33.5833%" y="671.50">c..</text></g><g><title>cargo::core::resolver::activate (1 samples, 2.22%)</title><rect x="33.3333%" y="645" width="2.2222%" height="15" fill="rgb(226,81,46)" fg:x="15" fg:w="1"/><text x="33.5833%" y="655.50">c..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 2.22%)</title><rect x="33.3333%" y="629" width="2.2222%" height="15" fill="rgb(247,70,30)" fg:x="15" fg:w="1"/><text x="33.5833%" y="639.50">c..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 2.22%)</title><rect x="33.3333%" y="613" width="2.2222%" height="15" fill="rgb(212,68,19)" fg:x="15" fg:w="1"/><text x="33.5833%" y="623.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 2.22%)</title><rect x="33.3333%" y="597" width="2.2222%" height="15" fill="rgb(240,187,13)" fg:x="15" fg:w="1"/><text x="33.5833%" y="607.50">&lt;..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps::_{{closure}} (1 samples, 2.22%)</title><rect x="33.3333%" y="581" width="2.2222%" height="15" fill="rgb(223,113,26)" fg:x="15" fg:w="1"/><text x="33.5833%" y="591.50">c..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 2.22%)</title><rect x="33.3333%" y="565" width="2.2222%" height="15" fill="rgb(206,192,2)" fg:x="15" fg:w="1"/><text x="33.5833%" y="575.50">c..</text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 2.22%)</title><rect x="33.3333%" y="549" width="2.2222%" height="15" fill="rgb(241,108,4)" fg:x="15" fg:w="1"/><text x="33.5833%" y="559.50">&lt;..</text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 2.22%)</title><rect x="33.3333%" y="533" width="2.2222%" height="15" fill="rgb(247,173,49)" fg:x="15" fg:w="1"/><text x="33.5833%" y="543.50">&lt;..</text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 2.22%)</title><rect x="33.3333%" y="517" width="2.2222%" height="15" fill="rgb(224,114,35)" fg:x="15" fg:w="1"/><text x="33.5833%" y="527.50">c..</text></g><g><title>cargo::sources::registry::index::RegistryIndex::summaries (1 samples, 2.22%)</title><rect x="33.3333%" y="501" width="2.2222%" height="15" fill="rgb(245,159,27)" fg:x="15" fg:w="1"/><text x="33.5833%" y="511.50">c..</text></g><g><title>memchr::memchr::x86::avx::memchr (1 samples, 2.22%)</title><rect x="33.3333%" y="485" width="2.2222%" height="15" fill="rgb(245,172,44)" fg:x="15" fg:w="1"/><text x="33.5833%" y="495.50">m..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 2.22%)</title><rect x="35.5556%" y="677" width="2.2222%" height="15" fill="rgb(236,23,11)" fg:x="16" fg:w="1"/><text x="35.8056%" y="687.50">c..</text></g><g><title>cargo::core::resolver::resolve (1 samples, 2.22%)</title><rect x="35.5556%" y="661" width="2.2222%" height="15" fill="rgb(205,117,38)" fg:x="16" fg:w="1"/><text x="35.8056%" y="671.50">c..</text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 2.22%)</title><rect x="35.5556%" y="645" width="2.2222%" height="15" fill="rgb(237,72,25)" fg:x="16" fg:w="1"/><text x="35.8056%" y="655.50">c..</text></g><g><title>cargo::core::resolver::activate (1 samples, 2.22%)</title><rect x="35.5556%" y="629" width="2.2222%" height="15" fill="rgb(244,70,9)" fg:x="16" fg:w="1"/><text x="35.8056%" y="639.50">c..</text></g><g><title>std::time::Instant::now (1 samples, 2.22%)</title><rect x="35.5556%" y="613" width="2.2222%" height="15" fill="rgb(217,125,39)" fg:x="16" fg:w="1"/><text x="35.8056%" y="623.50">s..</text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 2.22%)</title><rect x="35.5556%" y="597" width="2.2222%" height="15" fill="rgb(235,36,10)" fg:x="16" fg:w="1"/><text x="35.8056%" y="607.50">s..</text></g><g><title>std::sys::unix::time::inner::now (1 samples, 2.22%)</title><rect x="35.5556%" y="581" width="2.2222%" height="15" fill="rgb(251,123,47)" fg:x="16" fg:w="1"/><text x="35.8056%" y="591.50">s..</text></g><g><title>__GI___clock_gettime (1 samples, 2.22%)</title><rect x="35.5556%" y="565" width="2.2222%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="1"/><text x="35.8056%" y="575.50">_..</text></g><g><title>__vdso_clock_gettime (1 samples, 2.22%)</title><rect x="35.5556%" y="549" width="2.2222%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="1"/><text x="35.8056%" y="559.50">_..</text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 2.22%)</title><rect x="37.7778%" y="661" width="2.2222%" height="15" fill="rgb(211,50,8)" fg:x="17" fg:w="1"/><text x="38.0278%" y="671.50">c..</text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 2.22%)</title><rect x="37.7778%" y="645" width="2.2222%" height="15" fill="rgb(245,182,24)" fg:x="17" fg:w="1"/><text x="38.0278%" y="655.50">&lt;..</text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 2.22%)</title><rect x="37.7778%" y="629" width="2.2222%" height="15" fill="rgb(242,14,37)" fg:x="17" fg:w="1"/><text x="38.0278%" y="639.50">&lt;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 2.22%)</title><rect x="37.7778%" y="613" width="2.2222%" height="15" fill="rgb(246,228,12)" fg:x="17" fg:w="1"/><text x="38.0278%" y="623.50">&lt;..</text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 2.22%)</title><rect x="37.7778%" y="597" width="2.2222%" height="15" fill="rgb(213,55,15)" fg:x="17" fg:w="1"/><text x="38.0278%" y="607.50">&lt;..</text></g><g><title>cargo::core::source::source_id::SourceId::from_url (1 samples, 2.22%)</title><rect x="37.7778%" y="581" width="2.2222%" height="15" fill="rgb(209,9,3)" fg:x="17" fg:w="1"/><text x="38.0278%" y="591.50">c..</text></g><g><title>&lt;&amp;str as cargo::util::into_url::IntoUrl&gt;::into_url (1 samples, 2.22%)</title><rect x="37.7778%" y="565" width="2.2222%" height="15" fill="rgb(230,59,30)" fg:x="17" fg:w="1"/><text x="38.0278%" y="575.50">&lt;..</text></g><g><title>url::ParseOptions::parse (1 samples, 2.22%)</title><rect x="37.7778%" y="549" width="2.2222%" height="15" fill="rgb(209,121,21)" fg:x="17" fg:w="1"/><text x="38.0278%" y="559.50">u..</text></g><g><title>url::parser::Parser::parse_url (1 samples, 2.22%)</title><rect x="37.7778%" y="533" width="2.2222%" height="15" fill="rgb(220,109,13)" fg:x="17" fg:w="1"/><text x="38.0278%" y="543.50">u..</text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 2.22%)</title><rect x="37.7778%" y="517" width="2.2222%" height="15" fill="rgb(232,18,1)" fg:x="17" fg:w="1"/><text x="38.0278%" y="527.50">u..</text></g><g><title>url::parser::Parser::parse_path_start (1 samples, 2.22%)</title><rect x="37.7778%" y="501" width="2.2222%" height="15" fill="rgb(215,41,42)" fg:x="17" fg:w="1"/><text x="38.0278%" y="511.50">u..</text></g><g><title>url::parser::Parser::parse_path (1 samples, 2.22%)</title><rect x="37.7778%" y="485" width="2.2222%" height="15" fill="rgb(224,123,36)" fg:x="17" fg:w="1"/><text x="38.0278%" y="495.50">u..</text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 2.22%)</title><rect x="37.7778%" y="469" width="2.2222%" height="15" fill="rgb(240,125,3)" fg:x="17" fg:w="1"/><text x="38.0278%" y="479.50">_..</text></g><g><title>cargo::ops::lockfile::write_pkg_lockfile (1 samples, 2.22%)</title><rect x="40.0000%" y="661" width="2.2222%" height="15" fill="rgb(205,98,50)" fg:x="18" fg:w="1"/><text x="40.2500%" y="671.50">c..</text></g><g><title>cargo::ops::lockfile::resolve_to_string_orig (1 samples, 2.22%)</title><rect x="40.0000%" y="645" width="2.2222%" height="15" fill="rgb(205,185,37)" fg:x="18" fg:w="1"/><text x="40.2500%" y="655.50">c..</text></g><g><title>cargo::ops::lockfile::serialize_resolve (1 samples, 2.22%)</title><rect x="40.0000%" y="629" width="2.2222%" height="15" fill="rgb(238,207,15)" fg:x="18" fg:w="1"/><text x="40.2500%" y="639.50">c..</text></g><g><title>cargo::core::resolver::encode::&lt;impl serde::ser::Serialize for cargo::core::resolver::resolve::Resolve&gt;::serialize (1 samples, 2.22%)</title><rect x="40.0000%" y="613" width="2.2222%" height="15" fill="rgb(213,199,42)" fg:x="18" fg:w="1"/><text x="40.2500%" y="623.50">c..</text></g><g><title>cargo::core::resolver::encode::_::&lt;impl serde::ser::Serialize for cargo::core::resolver::encode::EncodableResolve&gt;::serialize (1 samples, 2.22%)</title><rect x="40.0000%" y="597" width="2.2222%" height="15" fill="rgb(235,201,11)" fg:x="18" fg:w="1"/><text x="40.2500%" y="607.50">c..</text></g><g><title>&lt;toml::value::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 2.22%)</title><rect x="40.0000%" y="581" width="2.2222%" height="15" fill="rgb(207,46,11)" fg:x="18" fg:w="1"/><text x="40.2500%" y="591.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 2.22%)</title><rect x="40.0000%" y="565" width="2.2222%" height="15" fill="rgb(241,35,35)" fg:x="18" fg:w="1"/><text x="40.2500%" y="575.50">s..</text></g><g><title>cargo::core::resolver::encode::_::&lt;impl serde::ser::Serialize for cargo::core::resolver::encode::EncodableDependency&gt;::serialize (1 samples, 2.22%)</title><rect x="40.0000%" y="549" width="2.2222%" height="15" fill="rgb(243,32,47)" fg:x="18" fg:w="1"/><text x="40.2500%" y="559.50">c..</text></g><g><title>&lt;toml::value::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 2.22%)</title><rect x="40.0000%" y="533" width="2.2222%" height="15" fill="rgb(247,202,23)" fg:x="18" fg:w="1"/><text x="40.2500%" y="543.50">&lt;..</text></g><g><title>&lt;toml::value::Serializer as serde::ser::Serializer&gt;::serialize_str (1 samples, 2.22%)</title><rect x="40.0000%" y="517" width="2.2222%" height="15" fill="rgb(219,102,11)" fg:x="18" fg:w="1"/><text x="40.2500%" y="527.50">&lt;..</text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (4 samples, 8.89%)</title><rect x="35.5556%" y="693" width="8.8889%" height="15" fill="rgb(243,110,44)" fg:x="16" fg:w="4"/><text x="35.8056%" y="703.50">cargo::ops::r..</text></g><g><title>cargo::ops::resolve::resolve_with_registry (3 samples, 6.67%)</title><rect x="37.7778%" y="677" width="6.6667%" height="15" fill="rgb(222,74,54)" fg:x="17" fg:w="3"/><text x="38.0278%" y="687.50">cargo::op..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 2.22%)</title><rect x="42.2222%" y="661" width="2.2222%" height="15" fill="rgb(216,99,12)" fg:x="19" fg:w="1"/><text x="42.4722%" y="671.50">c..</text></g><g><title>cargo::core::resolver::resolve (1 samples, 2.22%)</title><rect x="42.2222%" y="645" width="2.2222%" height="15" fill="rgb(226,22,26)" fg:x="19" fg:w="1"/><text x="42.4722%" y="655.50">c..</text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 2.22%)</title><rect x="42.2222%" y="629" width="2.2222%" height="15" fill="rgb(217,163,10)" fg:x="19" fg:w="1"/><text x="42.4722%" y="639.50">c..</text></g><g><title>cargo::core::resolver::activate (1 samples, 2.22%)</title><rect x="42.2222%" y="613" width="2.2222%" height="15" fill="rgb(213,25,53)" fg:x="19" fg:w="1"/><text x="42.4722%" y="623.50">c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 2.22%)</title><rect x="42.2222%" y="597" width="2.2222%" height="15" fill="rgb(252,105,26)" fg:x="19" fg:w="1"/><text x="42.4722%" y="607.50">s..</text></g><g><title>&lt;cargo::core::package_id::PackageId as core::hash::Hash&gt;::hash (1 samples, 2.22%)</title><rect x="42.2222%" y="581" width="2.2222%" height="15" fill="rgb(220,39,43)" fg:x="19" fg:w="1"/><text x="42.4722%" y="591.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 2.22%)</title><rect x="42.2222%" y="565" width="2.2222%" height="15" fill="rgb(229,68,48)" fg:x="19" fg:w="1"/><text x="42.4722%" y="575.50">&lt;..</text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 2.22%)</title><rect x="44.4444%" y="677" width="2.2222%" height="15" fill="rgb(252,8,32)" fg:x="20" fg:w="1"/><text x="44.6944%" y="687.50">&lt;..</text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 2.22%)</title><rect x="44.4444%" y="661" width="2.2222%" height="15" fill="rgb(223,20,43)" fg:x="20" fg:w="1"/><text x="44.6944%" y="671.50">&lt;..</text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 2.22%)</title><rect x="44.4444%" y="645" width="2.2222%" height="15" fill="rgb(229,81,49)" fg:x="20" fg:w="1"/><text x="44.6944%" y="655.50">&lt;..</text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 2.22%)</title><rect x="44.4444%" y="629" width="2.2222%" height="15" fill="rgb(236,28,36)" fg:x="20" fg:w="1"/><text x="44.6944%" y="639.50">&lt;..</text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 2.22%)</title><rect x="44.4444%" y="613" width="2.2222%" height="15" fill="rgb(249,185,26)" fg:x="20" fg:w="1"/><text x="44.6944%" y="623.50">&lt;..</text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 2.22%)</title><rect x="44.4444%" y="597" width="2.2222%" height="15" fill="rgb(249,174,33)" fg:x="20" fg:w="1"/><text x="44.6944%" y="607.50">&lt;..</text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 2.22%)</title><rect x="44.4444%" y="581" width="2.2222%" height="15" fill="rgb(233,201,37)" fg:x="20" fg:w="1"/><text x="44.6944%" y="591.50">&lt;..</text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 2.22%)</title><rect x="44.4444%" y="565" width="2.2222%" height="15" fill="rgb(221,78,26)" fg:x="20" fg:w="1"/><text x="44.6944%" y="575.50">&lt;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 2.22%)</title><rect x="44.4444%" y="549" width="2.2222%" height="15" fill="rgb(250,127,30)" fg:x="20" fg:w="1"/><text x="44.6944%" y="559.50">&lt;..</text></g><g><title>&lt;toml::value::SeqDeserializer as serde::de::SeqAccess&gt;::size_hint (1 samples, 2.22%)</title><rect x="44.4444%" y="533" width="2.2222%" height="15" fill="rgb(230,49,44)" fg:x="20" fg:w="1"/><text x="44.6944%" y="543.50">&lt;..</text></g><g><title>cargo::core::package_id::PackageId::pure (1 samples, 2.22%)</title><rect x="48.8889%" y="661" width="2.2222%" height="15" fill="rgb(229,67,23)" fg:x="22" fg:w="1"/><text x="49.1389%" y="671.50">c..</text></g><g><title>hashbrown::map::make_hash (1 samples, 2.22%)</title><rect x="48.8889%" y="645" width="2.2222%" height="15" fill="rgb(249,83,47)" fg:x="22" fg:w="1"/><text x="49.1389%" y="655.50">h..</text></g><g><title>&lt;cargo::core::package_id::PackageIdInner as core::hash::Hash&gt;::hash (1 samples, 2.22%)</title><rect x="48.8889%" y="629" width="2.2222%" height="15" fill="rgb(215,43,3)" fg:x="22" fg:w="1"/><text x="49.1389%" y="639.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 2.22%)</title><rect x="48.8889%" y="613" width="2.2222%" height="15" fill="rgb(238,154,13)" fg:x="22" fg:w="1"/><text x="49.1389%" y="623.50">&lt;..</text></g><g><title>cargo::core::summary::Summary::new (1 samples, 2.22%)</title><rect x="51.1111%" y="661" width="2.2222%" height="15" fill="rgb(219,56,2)" fg:x="23" fg:w="1"/><text x="51.3611%" y="671.50">c..</text></g><g><title>cargo::core::summary::build_feature_map (1 samples, 2.22%)</title><rect x="51.1111%" y="645" width="2.2222%" height="15" fill="rgb(233,0,4)" fg:x="23" fg:w="1"/><text x="51.3611%" y="655.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 2.22%)</title><rect x="51.1111%" y="629" width="2.2222%" height="15" fill="rgb(235,30,7)" fg:x="23" fg:w="1"/><text x="51.3611%" y="639.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 2.22%)</title><rect x="51.1111%" y="613" width="2.2222%" height="15" fill="rgb(250,79,13)" fg:x="23" fg:w="1"/><text x="51.3611%" y="623.50">a..</text></g><g><title>cargo::core::manifest::Target::lib_target (1 samples, 2.22%)</title><rect x="53.3333%" y="645" width="2.2222%" height="15" fill="rgb(211,146,34)" fg:x="24" fg:w="1"/><text x="53.5833%" y="655.50">c..</text></g><g><title>cargo::core::manifest::Target::with_path (1 samples, 2.22%)</title><rect x="53.3333%" y="629" width="2.2222%" height="15" fill="rgb(228,22,38)" fg:x="24" fg:w="1"/><text x="53.5833%" y="639.50">c..</text></g><g><title>__GI___libc_malloc (1 samples, 2.22%)</title><rect x="53.3333%" y="613" width="2.2222%" height="15" fill="rgb(235,168,5)" fg:x="24" fg:w="1"/><text x="53.5833%" y="623.50">_..</text></g><g><title>_int_malloc (1 samples, 2.22%)</title><rect x="53.3333%" y="597" width="2.2222%" height="15" fill="rgb(221,155,16)" fg:x="24" fg:w="1"/><text x="53.5833%" y="607.50">_..</text></g><g><title>cargo::util::toml::targets::configure (1 samples, 2.22%)</title><rect x="55.5556%" y="645" width="2.2222%" height="15" fill="rgb(215,215,53)" fg:x="25" fg:w="1"/><text x="55.8056%" y="655.50">c..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (1 samples, 2.22%)</title><rect x="55.5556%" y="629" width="2.2222%" height="15" fill="rgb(223,4,10)" fg:x="25" fg:w="1"/><text x="55.8056%" y="639.50">a..</text></g><g><title>cargo::util::toml::TomlManifest::to_real_manifest (6 samples, 13.33%)</title><rect x="46.6667%" y="677" width="13.3333%" height="15" fill="rgb(234,103,6)" fg:x="21" fg:w="6"/><text x="46.9167%" y="687.50">cargo::util::toml::T..</text></g><g><title>cargo::util::toml::targets::targets (3 samples, 6.67%)</title><rect x="53.3333%" y="661" width="6.6667%" height="15" fill="rgb(227,97,0)" fg:x="24" fg:w="3"/><text x="53.5833%" y="671.50">cargo::ut..</text></g><g><title>cargo::util::toml::targets::infer_from_directory (1 samples, 2.22%)</title><rect x="57.7778%" y="645" width="2.2222%" height="15" fill="rgb(234,150,53)" fg:x="26" fg:w="1"/><text x="58.0278%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 2.22%)</title><rect x="57.7778%" y="629" width="2.2222%" height="15" fill="rgb(228,201,54)" fg:x="26" fg:w="1"/><text x="58.0278%" y="639.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 2.22%)</title><rect x="57.7778%" y="613" width="2.2222%" height="15" fill="rgb(222,22,37)" fg:x="26" fg:w="1"/><text x="58.0278%" y="623.50">&lt;..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 2.22%)</title><rect x="57.7778%" y="597" width="2.2222%" height="15" fill="rgb(237,53,32)" fg:x="26" fg:w="1"/><text x="58.0278%" y="607.50">c..</text></g><g><title>std::fs::DirEntry::path (1 samples, 2.22%)</title><rect x="57.7778%" y="581" width="2.2222%" height="15" fill="rgb(233,25,53)" fg:x="26" fg:w="1"/><text x="58.0278%" y="591.50">s..</text></g><g><title>std::sys::unix::fs::DirEntry::path (1 samples, 2.22%)</title><rect x="57.7778%" y="565" width="2.2222%" height="15" fill="rgb(210,40,34)" fg:x="26" fg:w="1"/><text x="58.0278%" y="575.50">s..</text></g><g><title>std::path::Path::join (1 samples, 2.22%)</title><rect x="57.7778%" y="549" width="2.2222%" height="15" fill="rgb(241,220,44)" fg:x="26" fg:w="1"/><text x="58.0278%" y="559.50">s..</text></g><g><title>std::path::Path::_join (1 samples, 2.22%)</title><rect x="57.7778%" y="533" width="2.2222%" height="15" fill="rgb(235,28,35)" fg:x="26" fg:w="1"/><text x="58.0278%" y="543.50">s..</text></g><g><title>std::path::Path::to_path_buf (1 samples, 2.22%)</title><rect x="57.7778%" y="517" width="2.2222%" height="15" fill="rgb(210,56,17)" fg:x="26" fg:w="1"/><text x="58.0278%" y="527.50">s..</text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 2.22%)</title><rect x="57.7778%" y="501" width="2.2222%" height="15" fill="rgb(224,130,29)" fg:x="26" fg:w="1"/><text x="58.0278%" y="511.50">s..</text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 2.22%)</title><rect x="57.7778%" y="485" width="2.2222%" height="15" fill="rgb(235,212,8)" fg:x="26" fg:w="1"/><text x="58.0278%" y="495.50">s..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 2.22%)</title><rect x="57.7778%" y="469" width="2.2222%" height="15" fill="rgb(223,33,50)" fg:x="26" fg:w="1"/><text x="58.0278%" y="479.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 2.22%)</title><rect x="57.7778%" y="453" width="2.2222%" height="15" fill="rgb(219,149,13)" fg:x="26" fg:w="1"/><text x="58.0278%" y="463.50">a..</text></g><g><title>alloc::slice::hack::to_vec (1 samples, 2.22%)</title><rect x="57.7778%" y="437" width="2.2222%" height="15" fill="rgb(250,156,29)" fg:x="26" fg:w="1"/><text x="58.0278%" y="447.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 2.22%)</title><rect x="57.7778%" y="421" width="2.2222%" height="15" fill="rgb(216,193,19)" fg:x="26" fg:w="1"/><text x="58.0278%" y="431.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 2.22%)</title><rect x="57.7778%" y="405" width="2.2222%" height="15" fill="rgb(216,135,14)" fg:x="26" fg:w="1"/><text x="58.0278%" y="415.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 2.22%)</title><rect x="57.7778%" y="389" width="2.2222%" height="15" fill="rgb(241,47,5)" fg:x="26" fg:w="1"/><text x="58.0278%" y="399.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 2.22%)</title><rect x="57.7778%" y="373" width="2.2222%" height="15" fill="rgb(233,42,35)" fg:x="26" fg:w="1"/><text x="58.0278%" y="383.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 2.22%)</title><rect x="57.7778%" y="357" width="2.2222%" height="15" fill="rgb(231,13,6)" fg:x="26" fg:w="1"/><text x="58.0278%" y="367.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 2.22%)</title><rect x="57.7778%" y="341" width="2.2222%" height="15" fill="rgb(207,181,40)" fg:x="26" fg:w="1"/><text x="58.0278%" y="351.50">a..</text></g><g><title>alloc::alloc::alloc (1 samples, 2.22%)</title><rect x="57.7778%" y="325" width="2.2222%" height="15" fill="rgb(254,173,49)" fg:x="26" fg:w="1"/><text x="58.0278%" y="335.50">a..</text></g><g><title>__GI___libc_malloc (1 samples, 2.22%)</title><rect x="57.7778%" y="309" width="2.2222%" height="15" fill="rgb(221,1,38)" fg:x="26" fg:w="1"/><text x="58.0278%" y="319.50">_..</text></g><g><title>_int_malloc (1 samples, 2.22%)</title><rect x="57.7778%" y="293" width="2.2222%" height="15" fill="rgb(206,124,46)" fg:x="26" fg:w="1"/><text x="58.0278%" y="303.50">_..</text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 2.22%)</title><rect x="60.0000%" y="629" width="2.2222%" height="15" fill="rgb(249,21,11)" fg:x="27" fg:w="1"/><text x="60.2500%" y="639.50">&lt;..</text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 2.22%)</title><rect x="60.0000%" y="613" width="2.2222%" height="15" fill="rgb(222,201,40)" fg:x="27" fg:w="1"/><text x="60.2500%" y="623.50">&lt;..</text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 2.22%)</title><rect x="60.0000%" y="597" width="2.2222%" height="15" fill="rgb(235,61,29)" fg:x="27" fg:w="1"/><text x="60.2500%" y="607.50">&lt;..</text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 2.22%)</title><rect x="60.0000%" y="581" width="2.2222%" height="15" fill="rgb(219,207,3)" fg:x="27" fg:w="1"/><text x="60.2500%" y="591.50">&lt;..</text></g><g><title>&lt;toml::de::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 2.22%)</title><rect x="60.0000%" y="565" width="2.2222%" height="15" fill="rgb(222,56,46)" fg:x="27" fg:w="1"/><text x="60.2500%" y="575.50">&lt;..</text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 2.22%)</title><rect x="60.0000%" y="549" width="2.2222%" height="15" fill="rgb(239,76,54)" fg:x="27" fg:w="1"/><text x="60.2500%" y="559.50">&lt;..</text></g><g><title>[unknown] (29 samples, 64.44%)</title><rect x="0.0000%" y="709" width="64.4444%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="29"/><text x="0.2500%" y="719.50">[unknown]</text></g><g><title>cargo::util::toml::read_manifest (9 samples, 20.00%)</title><rect x="44.4444%" y="693" width="20.0000%" height="15" fill="rgb(249,195,6)" fg:x="20" fg:w="9"/><text x="44.6944%" y="703.50">cargo::util::toml::read_manifest</text></g><g><title>cargo::util::toml::parse (2 samples, 4.44%)</title><rect x="60.0000%" y="677" width="4.4444%" height="15" fill="rgb(237,174,47)" fg:x="27" fg:w="2"/><text x="60.2500%" y="687.50">cargo..</text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (2 samples, 4.44%)</title><rect x="60.0000%" y="661" width="4.4444%" height="15" fill="rgb(206,201,31)" fg:x="27" fg:w="2"/><text x="60.2500%" y="671.50">&lt;toml..</text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (2 samples, 4.44%)</title><rect x="60.0000%" y="645" width="4.4444%" height="15" fill="rgb(231,57,52)" fg:x="27" fg:w="2"/><text x="60.2500%" y="655.50">&lt;&amp;mut..</text></g><g><title>toml::de::Deserializer::tables (1 samples, 2.22%)</title><rect x="62.2222%" y="629" width="2.2222%" height="15" fill="rgb(248,177,22)" fg:x="28" fg:w="1"/><text x="62.4722%" y="639.50">t..</text></g><g><title>toml::de::Deserializer::value (1 samples, 2.22%)</title><rect x="62.2222%" y="613" width="2.2222%" height="15" fill="rgb(215,211,37)" fg:x="28" fg:w="1"/><text x="62.4722%" y="623.50">t..</text></g><g><title>toml::de::Deserializer::inline_table (1 samples, 2.22%)</title><rect x="62.2222%" y="597" width="2.2222%" height="15" fill="rgb(241,128,51)" fg:x="28" fg:w="1"/><text x="62.4722%" y="607.50">t..</text></g><g><title>toml::de::Deserializer::value (1 samples, 2.22%)</title><rect x="62.2222%" y="581" width="2.2222%" height="15" fill="rgb(227,165,31)" fg:x="28" fg:w="1"/><text x="62.4722%" y="591.50">t..</text></g><g><title>toml::tokens::Tokenizer::eat_spanned (1 samples, 2.22%)</title><rect x="62.2222%" y="565" width="2.2222%" height="15" fill="rgb(228,167,24)" fg:x="28" fg:w="1"/><text x="62.4722%" y="575.50">t..</text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 2.22%)</title><rect x="62.2222%" y="549" width="2.2222%" height="15" fill="rgb(228,143,12)" fg:x="28" fg:w="1"/><text x="62.4722%" y="559.50">t..</text></g><g><title>toml::tokens::Tokenizer::read_string (1 samples, 2.22%)</title><rect x="62.2222%" y="533" width="2.2222%" height="15" fill="rgb(249,149,8)" fg:x="28" fg:w="1"/><text x="62.4722%" y="543.50">t..</text></g><g><title>toml::tokens::Tokenizer::basic_string::{{closure}} (1 samples, 2.22%)</title><rect x="62.2222%" y="517" width="2.2222%" height="15" fill="rgb(243,35,44)" fg:x="28" fg:w="1"/><text x="62.4722%" y="527.50">t..</text></g><g><title>__libc_csu_init (1 samples, 2.22%)</title><rect x="64.4444%" y="677" width="2.2222%" height="15" fill="rgb(246,89,9)" fg:x="29" fg:w="1"/><text x="64.6944%" y="687.50">_..</text></g><g><title>curl::init::init_inner (1 samples, 2.22%)</title><rect x="64.4444%" y="661" width="2.2222%" height="15" fill="rgb(233,213,13)" fg:x="29" fg:w="1"/><text x="64.6944%" y="671.50">c..</text></g><g><title>std::sync::once::Once::call_inner (1 samples, 2.22%)</title><rect x="64.4444%" y="645" width="2.2222%" height="15" fill="rgb(233,141,41)" fg:x="29" fg:w="1"/><text x="64.6944%" y="655.50">s..</text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (1 samples, 2.22%)</title><rect x="64.4444%" y="629" width="2.2222%" height="15" fill="rgb(239,167,4)" fg:x="29" fg:w="1"/><text x="64.6944%" y="639.50">s..</text></g><g><title>curl_global_init (1 samples, 2.22%)</title><rect x="64.4444%" y="613" width="2.2222%" height="15" fill="rgb(209,217,16)" fg:x="29" fg:w="1"/><text x="64.6944%" y="623.50">c..</text></g><g><title>ossl_init (1 samples, 2.22%)</title><rect x="64.4444%" y="597" width="2.2222%" height="15" fill="rgb(219,88,35)" fg:x="29" fg:w="1"/><text x="64.6944%" y="607.50">o..</text></g><g><title>OPENSSL_init_ssl (1 samples, 2.22%)</title><rect x="64.4444%" y="581" width="2.2222%" height="15" fill="rgb(220,193,23)" fg:x="29" fg:w="1"/><text x="64.6944%" y="591.50">O..</text></g><g><title>OPENSSL_init_crypto (1 samples, 2.22%)</title><rect x="64.4444%" y="565" width="2.2222%" height="15" fill="rgb(230,90,52)" fg:x="29" fg:w="1"/><text x="64.6944%" y="575.50">O..</text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 2.22%)</title><rect x="64.4444%" y="549" width="2.2222%" height="15" fill="rgb(252,106,19)" fg:x="29" fg:w="1"/><text x="64.6944%" y="559.50">C..</text></g><g><title>__pthread_once_slow (1 samples, 2.22%)</title><rect x="64.4444%" y="533" width="2.2222%" height="15" fill="rgb(206,74,20)" fg:x="29" fg:w="1"/><text x="64.6944%" y="543.50">_..</text></g><g><title>ossl_init_config_ossl_ (1 samples, 2.22%)</title><rect x="64.4444%" y="517" width="2.2222%" height="15" fill="rgb(230,138,44)" fg:x="29" fg:w="1"/><text x="64.6944%" y="527.50">o..</text></g><g><title>openssl_config_int (1 samples, 2.22%)</title><rect x="64.4444%" y="501" width="2.2222%" height="15" fill="rgb(235,182,43)" fg:x="29" fg:w="1"/><text x="64.6944%" y="511.50">o..</text></g><g><title>OPENSSL_init_crypto (1 samples, 2.22%)</title><rect x="64.4444%" y="485" width="2.2222%" height="15" fill="rgb(242,16,51)" fg:x="29" fg:w="1"/><text x="64.6944%" y="495.50">O..</text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 2.22%)</title><rect x="64.4444%" y="469" width="2.2222%" height="15" fill="rgb(248,9,4)" fg:x="29" fg:w="1"/><text x="64.6944%" y="479.50">C..</text></g><g><title>__pthread_once_slow (1 samples, 2.22%)</title><rect x="64.4444%" y="453" width="2.2222%" height="15" fill="rgb(210,31,22)" fg:x="29" fg:w="1"/><text x="64.6944%" y="463.50">_..</text></g><g><title>ossl_init_engine_rdrand_ossl_ (1 samples, 2.22%)</title><rect x="64.4444%" y="437" width="2.2222%" height="15" fill="rgb(239,54,39)" fg:x="29" fg:w="1"/><text x="64.6944%" y="447.50">o..</text></g><g><title>ERR_clear_error (1 samples, 2.22%)</title><rect x="64.4444%" y="421" width="2.2222%" height="15" fill="rgb(230,99,41)" fg:x="29" fg:w="1"/><text x="64.6944%" y="431.50">E..</text></g><g><title>ERR_get_state (1 samples, 2.22%)</title><rect x="64.4444%" y="405" width="2.2222%" height="15" fill="rgb(253,106,12)" fg:x="29" fg:w="1"/><text x="64.6944%" y="415.50">E..</text></g><g><title>OPENSSL_init_crypto (1 samples, 2.22%)</title><rect x="64.4444%" y="389" width="2.2222%" height="15" fill="rgb(213,46,41)" fg:x="29" fg:w="1"/><text x="64.6944%" y="399.50">O..</text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 2.22%)</title><rect x="64.4444%" y="373" width="2.2222%" height="15" fill="rgb(215,133,35)" fg:x="29" fg:w="1"/><text x="64.6944%" y="383.50">C..</text></g><g><title>__pthread_once_slow (1 samples, 2.22%)</title><rect x="64.4444%" y="357" width="2.2222%" height="15" fill="rgb(213,28,5)" fg:x="29" fg:w="1"/><text x="64.6944%" y="367.50">_..</text></g><g><title>ossl_init_load_crypto_strings_ossl_ (1 samples, 2.22%)</title><rect x="64.4444%" y="341" width="2.2222%" height="15" fill="rgb(215,77,49)" fg:x="29" fg:w="1"/><text x="64.6944%" y="351.50">o..</text></g><g><title>err_load_crypto_strings_int (1 samples, 2.22%)</title><rect x="64.4444%" y="325" width="2.2222%" height="15" fill="rgb(248,100,22)" fg:x="29" fg:w="1"/><text x="64.6944%" y="335.50">e..</text></g><g><title>ERR_load_ERR_strings (1 samples, 2.22%)</title><rect x="64.4444%" y="309" width="2.2222%" height="15" fill="rgb(208,67,9)" fg:x="29" fg:w="1"/><text x="64.6944%" y="319.50">E..</text></g><g><title>openssl_strerror_r (1 samples, 2.22%)</title><rect x="64.4444%" y="293" width="2.2222%" height="15" fill="rgb(219,133,21)" fg:x="29" fg:w="1"/><text x="64.6944%" y="303.50">o..</text></g><g><title>__xpg_strerror_r (1 samples, 2.22%)</title><rect x="64.4444%" y="277" width="2.2222%" height="15" fill="rgb(246,46,29)" fg:x="29" fg:w="1"/><text x="64.6944%" y="287.50">_..</text></g><g><title>__GI___strerror_r (1 samples, 2.22%)</title><rect x="64.4444%" y="261" width="2.2222%" height="15" fill="rgb(246,185,52)" fg:x="29" fg:w="1"/><text x="64.6944%" y="271.50">_..</text></g><g><title>__dcigettext (1 samples, 2.22%)</title><rect x="64.4444%" y="245" width="2.2222%" height="15" fill="rgb(252,136,11)" fg:x="29" fg:w="1"/><text x="64.6944%" y="255.50">_..</text></g><g><title>ASN1_item_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="261" width="2.2222%" height="15" fill="rgb(219,138,53)" fg:x="30" fg:w="1"/><text x="66.9167%" y="271.50">A..</text></g><g><title>asn1_item_embed_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="245" width="2.2222%" height="15" fill="rgb(211,51,23)" fg:x="30" fg:w="1"/><text x="66.9167%" y="255.50">a..</text></g><g><title>asn1_template_ex_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="229" width="2.2222%" height="15" fill="rgb(247,221,28)" fg:x="30" fg:w="1"/><text x="66.9167%" y="239.50">a..</text></g><g><title>asn1_template_noexp_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="213" width="2.2222%" height="15" fill="rgb(251,222,45)" fg:x="30" fg:w="1"/><text x="66.9167%" y="223.50">a..</text></g><g><title>asn1_item_embed_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="197" width="2.2222%" height="15" fill="rgb(217,162,53)" fg:x="30" fg:w="1"/><text x="66.9167%" y="207.50">a..</text></g><g><title>asn1_template_ex_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="181" width="2.2222%" height="15" fill="rgb(229,93,14)" fg:x="30" fg:w="1"/><text x="66.9167%" y="191.50">a..</text></g><g><title>asn1_template_noexp_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="165" width="2.2222%" height="15" fill="rgb(209,67,49)" fg:x="30" fg:w="1"/><text x="66.9167%" y="175.50">a..</text></g><g><title>asn1_item_embed_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="149" width="2.2222%" height="15" fill="rgb(213,87,29)" fg:x="30" fg:w="1"/><text x="66.9167%" y="159.50">a..</text></g><g><title>x509_name_ex_d2i (1 samples, 2.22%)</title><rect x="66.6667%" y="133" width="2.2222%" height="15" fill="rgb(205,151,52)" fg:x="30" fg:w="1"/><text x="66.9167%" y="143.50">x..</text></g><g><title>x509_name_canon (1 samples, 2.22%)</title><rect x="66.6667%" y="117" width="2.2222%" height="15" fill="rgb(253,215,39)" fg:x="30" fg:w="1"/><text x="66.9167%" y="127.50">x..</text></g><g><title>CRYPTO_free (1 samples, 2.22%)</title><rect x="66.6667%" y="101" width="2.2222%" height="15" fill="rgb(221,220,41)" fg:x="30" fg:w="1"/><text x="66.9167%" y="111.50">C..</text></g><g><title>OPENSSL_cleanse (1 samples, 2.22%)</title><rect x="68.8889%" y="181" width="2.2222%" height="15" fill="rgb(218,133,21)" fg:x="31" fg:w="1"/><text x="69.1389%" y="191.50">O..</text></g><g><title>BIO_puts (2 samples, 4.44%)</title><rect x="68.8889%" y="245" width="4.4444%" height="15" fill="rgb(221,193,43)" fg:x="31" fg:w="2"/><text x="69.1389%" y="255.50">BIO_p..</text></g><g><title>mem_write (2 samples, 4.44%)</title><rect x="68.8889%" y="229" width="4.4444%" height="15" fill="rgb(240,128,52)" fg:x="31" fg:w="2"/><text x="69.1389%" y="239.50">mem_w..</text></g><g><title>BUF_MEM_grow_clean (2 samples, 4.44%)</title><rect x="68.8889%" y="213" width="4.4444%" height="15" fill="rgb(253,114,12)" fg:x="31" fg:w="2"/><text x="69.1389%" y="223.50">BUF_M..</text></g><g><title>CRYPTO_clear_realloc (2 samples, 4.44%)</title><rect x="68.8889%" y="197" width="4.4444%" height="15" fill="rgb(215,223,47)" fg:x="31" fg:w="2"/><text x="69.1389%" y="207.50">CRYPT..</text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 2.22%)</title><rect x="71.1111%" y="181" width="2.2222%" height="15" fill="rgb(248,225,23)" fg:x="32" fg:w="1"/><text x="71.3611%" y="191.50">_..</text></g><g><title>cargo (34 samples, 75.56%)</title><rect x="0.0000%" y="725" width="75.5556%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="34"/><text x="0.2500%" y="735.50">cargo</text></g><g><title>_start (5 samples, 11.11%)</title><rect x="64.4444%" y="709" width="11.1111%" height="15" fill="rgb(228,208,7)" fg:x="29" fg:w="5"/><text x="64.6944%" y="719.50">_start</text></g><g><title>__libc_start_main (5 samples, 11.11%)</title><rect x="64.4444%" y="693" width="11.1111%" height="15" fill="rgb(244,45,10)" fg:x="29" fg:w="5"/><text x="64.6944%" y="703.50">__libc_start_main</text></g><g><title>main (4 samples, 8.89%)</title><rect x="66.6667%" y="677" width="8.8889%" height="15" fill="rgb(207,125,25)" fg:x="30" fg:w="4"/><text x="66.9167%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (4 samples, 8.89%)</title><rect x="66.6667%" y="661" width="8.8889%" height="15" fill="rgb(210,195,18)" fg:x="30" fg:w="4"/><text x="66.9167%" y="671.50">std::rt::lang..</text></g><g><title>std::panic::catch_unwind (4 samples, 8.89%)</title><rect x="66.6667%" y="645" width="8.8889%" height="15" fill="rgb(249,80,12)" fg:x="30" fg:w="4"/><text x="66.9167%" y="655.50">std::panic::c..</text></g><g><title>std::panicking::try (4 samples, 8.89%)</title><rect x="66.6667%" y="629" width="8.8889%" height="15" fill="rgb(221,65,9)" fg:x="30" fg:w="4"/><text x="66.9167%" y="639.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (4 samples, 8.89%)</title><rect x="66.6667%" y="613" width="8.8889%" height="15" fill="rgb(235,49,36)" fg:x="30" fg:w="4"/><text x="66.9167%" y="623.50">std::panickin..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4 samples, 8.89%)</title><rect x="66.6667%" y="597" width="8.8889%" height="15" fill="rgb(225,32,20)" fg:x="30" fg:w="4"/><text x="66.9167%" y="607.50">std::rt::lang..</text></g><g><title>std::panic::catch_unwind (4 samples, 8.89%)</title><rect x="66.6667%" y="581" width="8.8889%" height="15" fill="rgb(215,141,46)" fg:x="30" fg:w="4"/><text x="66.9167%" y="591.50">std::panic::c..</text></g><g><title>std::panicking::try (4 samples, 8.89%)</title><rect x="66.6667%" y="565" width="8.8889%" height="15" fill="rgb(250,160,47)" fg:x="30" fg:w="4"/><text x="66.9167%" y="575.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (4 samples, 8.89%)</title><rect x="66.6667%" y="549" width="8.8889%" height="15" fill="rgb(216,222,40)" fg:x="30" fg:w="4"/><text x="66.9167%" y="559.50">std::panickin..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 8.89%)</title><rect x="66.6667%" y="533" width="8.8889%" height="15" fill="rgb(234,217,39)" fg:x="30" fg:w="4"/><text x="66.9167%" y="543.50">core::ops::fu..</text></g><g><title>std::rt::lang_start::{{closure}} (4 samples, 8.89%)</title><rect x="66.6667%" y="517" width="8.8889%" height="15" fill="rgb(207,178,40)" fg:x="30" fg:w="4"/><text x="66.9167%" y="527.50">std::rt::lang..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 8.89%)</title><rect x="66.6667%" y="501" width="8.8889%" height="15" fill="rgb(221,136,13)" fg:x="30" fg:w="4"/><text x="66.9167%" y="511.50">std::sys_comm..</text></g><g><title>cargo::main (4 samples, 8.89%)</title><rect x="66.6667%" y="485" width="8.8889%" height="15" fill="rgb(249,199,10)" fg:x="30" fg:w="4"/><text x="66.9167%" y="495.50">cargo::main</text></g><g><title>cargo::cli::main (4 samples, 8.89%)</title><rect x="66.6667%" y="469" width="8.8889%" height="15" fill="rgb(249,222,13)" fg:x="30" fg:w="4"/><text x="66.9167%" y="479.50">cargo::cli::m..</text></g><g><title>cargo::ops::registry::needs_custom_http_transport (4 samples, 8.89%)</title><rect x="66.6667%" y="453" width="8.8889%" height="15" fill="rgb(244,185,38)" fg:x="30" fg:w="4"/><text x="66.9167%" y="463.50">cargo::ops::r..</text></g><g><title>cargo::ops::registry::http_proxy (4 samples, 8.89%)</title><rect x="66.6667%" y="437" width="8.8889%" height="15" fill="rgb(236,202,9)" fg:x="30" fg:w="4"/><text x="66.9167%" y="447.50">cargo::ops::r..</text></g><g><title>git2::config::Config::open_default (4 samples, 8.89%)</title><rect x="66.6667%" y="421" width="8.8889%" height="15" fill="rgb(250,229,37)" fg:x="30" fg:w="4"/><text x="66.9167%" y="431.50">git2::config:..</text></g><g><title>libgit2_sys::init (4 samples, 8.89%)</title><rect x="66.6667%" y="405" width="8.8889%" height="15" fill="rgb(206,174,23)" fg:x="30" fg:w="4"/><text x="66.9167%" y="415.50">libgit2_sys::..</text></g><g><title>std::sync::once::Once::call_inner (4 samples, 8.89%)</title><rect x="66.6667%" y="389" width="8.8889%" height="15" fill="rgb(211,33,43)" fg:x="30" fg:w="4"/><text x="66.9167%" y="399.50">std::sync::on..</text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (4 samples, 8.89%)</title><rect x="66.6667%" y="373" width="8.8889%" height="15" fill="rgb(245,58,50)" fg:x="30" fg:w="4"/><text x="66.9167%" y="383.50">std::sync::on..</text></g><g><title>git_runtime_init (4 samples, 8.89%)</title><rect x="66.6667%" y="357" width="8.8889%" height="15" fill="rgb(244,68,36)" fg:x="30" fg:w="4"/><text x="66.9167%" y="367.50">git_runtime_i..</text></g><g><title>git_openssl_stream_global_init (4 samples, 8.89%)</title><rect x="66.6667%" y="341" width="8.8889%" height="15" fill="rgb(232,229,15)" fg:x="30" fg:w="4"/><text x="66.9167%" y="351.50">git_openssl_s..</text></g><g><title>X509_STORE_set_default_paths (4 samples, 8.89%)</title><rect x="66.6667%" y="325" width="8.8889%" height="15" fill="rgb(254,30,23)" fg:x="30" fg:w="4"/><text x="66.9167%" y="335.50">X509_STORE_se..</text></g><g><title>by_file_ctrl (4 samples, 8.89%)</title><rect x="66.6667%" y="309" width="8.8889%" height="15" fill="rgb(235,160,14)" fg:x="30" fg:w="4"/><text x="66.9167%" y="319.50">by_file_ctrl</text></g><g><title>X509_load_cert_crl_file (4 samples, 8.89%)</title><rect x="66.6667%" y="293" width="8.8889%" height="15" fill="rgb(212,155,44)" fg:x="30" fg:w="4"/><text x="66.9167%" y="303.50">X509_load_cer..</text></g><g><title>PEM_X509_INFO_read_bio (4 samples, 8.89%)</title><rect x="66.6667%" y="277" width="8.8889%" height="15" fill="rgb(226,2,50)" fg:x="30" fg:w="4"/><text x="66.9167%" y="287.50">PEM_X509_INFO..</text></g><g><title>PEM_read_bio_ex (3 samples, 6.67%)</title><rect x="68.8889%" y="261" width="6.6667%" height="15" fill="rgb(234,177,6)" fg:x="31" fg:w="3"/><text x="69.1389%" y="271.50">PEM_read_..</text></g><g><title>EVP_DecodeUpdate (1 samples, 2.22%)</title><rect x="73.3333%" y="245" width="2.2222%" height="15" fill="rgb(217,24,9)" fg:x="33" fg:w="1"/><text x="73.5833%" y="255.50">E..</text></g><g><title>xiv_crafting_sim::actions::Action::details (1 samples, 2.22%)</title><rect x="84.4444%" y="69" width="2.2222%" height="15" fill="rgb(220,13,46)" fg:x="38" fg:w="1"/><text x="84.6944%" y="79.50">x..</text></g><g><title>all (45 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="45"/><text x="0.2500%" y="751.50"></text></g><g><title>fitness-74beb3f (11 samples, 24.44%)</title><rect x="75.5556%" y="725" width="24.4444%" height="15" fill="rgb(222,198,25)" fg:x="34" fg:w="11"/><text x="75.8056%" y="735.50">fitness-74beb3f</text></g><g><title>_start (11 samples, 24.44%)</title><rect x="75.5556%" y="709" width="24.4444%" height="15" fill="rgb(211,99,13)" fg:x="34" fg:w="11"/><text x="75.8056%" y="719.50">_start</text></g><g><title>__libc_start_main (11 samples, 24.44%)</title><rect x="75.5556%" y="693" width="24.4444%" height="15" fill="rgb(232,111,31)" fg:x="34" fg:w="11"/><text x="75.8056%" y="703.50">__libc_start_main</text></g><g><title>main (11 samples, 24.44%)</title><rect x="75.5556%" y="677" width="24.4444%" height="15" fill="rgb(245,82,37)" fg:x="34" fg:w="11"/><text x="75.8056%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (11 samples, 24.44%)</title><rect x="75.5556%" y="661" width="24.4444%" height="15" fill="rgb(227,149,46)" fg:x="34" fg:w="11"/><text x="75.8056%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (11 samples, 24.44%)</title><rect x="75.5556%" y="645" width="24.4444%" height="15" fill="rgb(218,36,50)" fg:x="34" fg:w="11"/><text x="75.8056%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11 samples, 24.44%)</title><rect x="75.5556%" y="629" width="24.4444%" height="15" fill="rgb(226,80,48)" fg:x="34" fg:w="11"/><text x="75.8056%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11 samples, 24.44%)</title><rect x="75.5556%" y="613" width="24.4444%" height="15" fill="rgb(238,224,15)" fg:x="34" fg:w="11"/><text x="75.8056%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (11 samples, 24.44%)</title><rect x="75.5556%" y="597" width="24.4444%" height="15" fill="rgb(241,136,10)" fg:x="34" fg:w="11"/><text x="75.8056%" y="607.50">std::rt::lang_start_internal::{{closure..</text></g><g><title>std::panic::catch_unwind (11 samples, 24.44%)</title><rect x="75.5556%" y="581" width="24.4444%" height="15" fill="rgb(208,32,45)" fg:x="34" fg:w="11"/><text x="75.8056%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11 samples, 24.44%)</title><rect x="75.5556%" y="565" width="24.4444%" height="15" fill="rgb(207,135,9)" fg:x="34" fg:w="11"/><text x="75.8056%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11 samples, 24.44%)</title><rect x="75.5556%" y="549" width="24.4444%" height="15" fill="rgb(206,86,44)" fg:x="34" fg:w="11"/><text x="75.8056%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 24.44%)</title><rect x="75.5556%" y="533" width="24.4444%" height="15" fill="rgb(245,177,15)" fg:x="34" fg:w="11"/><text x="75.8056%" y="543.50">core::ops::function::impls::&lt;impl core:..</text></g><g><title>std::rt::lang_start::{{closure}} (11 samples, 24.44%)</title><rect x="75.5556%" y="517" width="24.4444%" height="15" fill="rgb(206,64,50)" fg:x="34" fg:w="11"/><text x="75.8056%" y="527.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 24.44%)</title><rect x="75.5556%" y="501" width="24.4444%" height="15" fill="rgb(234,36,40)" fg:x="34" fg:w="11"/><text x="75.8056%" y="511.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>core::ops::function::FnOnce::call_once (11 samples, 24.44%)</title><rect x="75.5556%" y="485" width="24.4444%" height="15" fill="rgb(213,64,8)" fg:x="34" fg:w="11"/><text x="75.8056%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>fitness::main (11 samples, 24.44%)</title><rect x="75.5556%" y="469" width="24.4444%" height="15" fill="rgb(210,75,36)" fg:x="34" fg:w="11"/><text x="75.8056%" y="479.50">fitness::main</text></g><g><title>fitness::fitness_bench (11 samples, 24.44%)</title><rect x="75.5556%" y="453" width="24.4444%" height="15" fill="rgb(229,88,21)" fg:x="34" fg:w="11"/><text x="75.8056%" y="463.50">fitness::fitness_bench</text></g><g><title>fitness::fitness (11 samples, 24.44%)</title><rect x="75.5556%" y="437" width="24.4444%" height="15" fill="rgb(252,204,47)" fg:x="34" fg:w="11"/><text x="75.8056%" y="447.50">fitness::fitness</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (11 samples, 24.44%)</title><rect x="75.5556%" y="421" width="24.4444%" height="15" fill="rgb(208,77,27)" fg:x="34" fg:w="11"/><text x="75.8056%" y="431.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (11 samples, 24.44%)</title><rect x="75.5556%" y="405" width="24.4444%" height="15" fill="rgb(221,76,26)" fg:x="34" fg:w="11"/><text x="75.8056%" y="415.50">criterion::benchmark_group::BenchmarkGr..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (11 samples, 24.44%)</title><rect x="75.5556%" y="389" width="24.4444%" height="15" fill="rgb(225,139,18)" fg:x="34" fg:w="11"/><text x="75.8056%" y="399.50">criterion::benchmark_group::BenchmarkGr..</text></g><g><title>criterion::routine::Routine::test (11 samples, 24.44%)</title><rect x="75.5556%" y="373" width="24.4444%" height="15" fill="rgb(230,137,11)" fg:x="34" fg:w="11"/><text x="75.8056%" y="383.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (11 samples, 24.44%)</title><rect x="75.5556%" y="357" width="24.4444%" height="15" fill="rgb(212,28,1)" fg:x="34" fg:w="11"/><text x="75.8056%" y="367.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 24.44%)</title><rect x="75.5556%" y="341" width="24.4444%" height="15" fill="rgb(248,164,17)" fg:x="34" fg:w="11"/><text x="75.8056%" y="351.50">core::iter::traits::iterator::Iterator:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 24.44%)</title><rect x="75.5556%" y="325" width="24.4444%" height="15" fill="rgb(222,171,42)" fg:x="34" fg:w="11"/><text x="75.8056%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::trai..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 24.44%)</title><rect x="75.5556%" y="309" width="24.4444%" height="15" fill="rgb(243,84,45)" fg:x="34" fg:w="11"/><text x="75.8056%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (11 samples, 24.44%)</title><rect x="75.5556%" y="293" width="24.4444%" height="15" fill="rgb(252,49,23)" fg:x="34" fg:w="11"/><text x="75.8056%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 24.44%)</title><rect x="75.5556%" y="277" width="24.4444%" height="15" fill="rgb(215,19,7)" fg:x="34" fg:w="11"/><text x="75.8056%" y="287.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::sp..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 24.44%)</title><rect x="75.5556%" y="261" width="24.4444%" height="15" fill="rgb(238,81,41)" fg:x="34" fg:w="11"/><text x="75.8056%" y="271.50">core::iter::traits::iterator::Iterator:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 24.44%)</title><rect x="75.5556%" y="245" width="24.4444%" height="15" fill="rgb(210,199,37)" fg:x="34" fg:w="11"/><text x="75.8056%" y="255.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 24.44%)</title><rect x="75.5556%" y="229" width="24.4444%" height="15" fill="rgb(244,192,49)" fg:x="34" fg:w="11"/><text x="75.8056%" y="239.50">core::iter::traits::iterator::Iterator:..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (11 samples, 24.44%)</title><rect x="75.5556%" y="213" width="24.4444%" height="15" fill="rgb(226,211,11)" fg:x="34" fg:w="11"/><text x="75.8056%" y="223.50">core::iter::adapters::map::map_fold::{{..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (11 samples, 24.44%)</title><rect x="75.5556%" y="197" width="24.4444%" height="15" fill="rgb(236,162,54)" fg:x="34" fg:w="11"/><text x="75.8056%" y="207.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (11 samples, 24.44%)</title><rect x="75.5556%" y="181" width="24.4444%" height="15" fill="rgb(220,229,9)" fg:x="34" fg:w="11"/><text x="75.8056%" y="191.50">criterion::benchmark_group::BenchmarkGr..</text></g><g><title>fitness::fitness::{{closure}} (11 samples, 24.44%)</title><rect x="75.5556%" y="165" width="24.4444%" height="15" fill="rgb(250,87,22)" fg:x="34" fg:w="11"/><text x="75.8056%" y="175.50">fitness::fitness::{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (11 samples, 24.44%)</title><rect x="75.5556%" y="149" width="24.4444%" height="15" fill="rgb(239,43,17)" fg:x="34" fg:w="11"/><text x="75.8056%" y="159.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>fitness::fitness::{{closure}}::{{closure}} (11 samples, 24.44%)</title><rect x="75.5556%" y="133" width="24.4444%" height="15" fill="rgb(231,177,25)" fg:x="34" fg:w="11"/><text x="75.8056%" y="143.50">fitness::fitness::{{closure}}::{{closur..</text></g><g><title>fitness::f_calc (11 samples, 24.44%)</title><rect x="75.5556%" y="117" width="24.4444%" height="15" fill="rgb(219,179,1)" fg:x="34" fg:w="11"/><text x="75.8056%" y="127.50">fitness::f_calc</text></g><g><title>xiv_crafting_sim::simulator::&lt;impl genevo::genetic::FitnessFunction&lt;alloc::vec::Vec&lt;usize&gt;,i32&gt; for xiv_crafting_sim::xiv_model::Synth&gt;::fitness_of (11 samples, 24.44%)</title><rect x="75.5556%" y="101" width="24.4444%" height="15" fill="rgb(238,219,53)" fg:x="34" fg:w="11"/><text x="75.8056%" y="111.50">xiv_crafting_sim::simulator::&lt;impl gene..</text></g><g><title>&lt;alloc::vec::Vec&lt;usize&gt; as xiv_crafting_sim::simulator::CalcState&gt;::calculate_final_state (11 samples, 24.44%)</title><rect x="75.5556%" y="85" width="24.4444%" height="15" fill="rgb(232,167,36)" fg:x="34" fg:w="11"/><text x="75.8056%" y="95.50">&lt;alloc::vec::Vec&lt;usize&gt; as xiv_crafting..</text></g><g><title>xiv_crafting_sim::effect_tracker::EffectData::get (6 samples, 13.33%)</title><rect x="86.6667%" y="69" width="13.3333%" height="15" fill="rgb(244,19,51)" fg:x="39" fg:w="6"/><text x="86.9167%" y="79.50">xiv_crafting_sim::ef..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 11.11%)</title><rect x="88.8889%" y="53" width="11.1111%" height="15" fill="rgb(224,6,22)" fg:x="40" fg:w="5"/><text x="89.1389%" y="63.50">&lt;core::iter::ada..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 2.22%)</title><rect x="97.7778%" y="37" width="2.2222%" height="15" fill="rgb(224,145,5)" fg:x="44" fg:w="1"/><text x="98.0278%" y="47.50">c..</text></g></svg></svg>